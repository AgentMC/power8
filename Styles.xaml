<ResourceDictionary
 xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
 xmlns:my="clr-namespace:Power8" mc:Ignorable="d">
    <!-- Resource dictionary entries should be defined here. -->
    <my:NameToResourceConverter x:Key="localizer"/>

    <Style TargetType="{x:Type Button}">
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Margin" Value="3,0"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="10,6"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="Content" Value="{Binding Path=Name, 
                                                  RelativeSource={RelativeSource Self}, 
                                                  Mode=OneWay, 
                                                  Converter={StaticResource localizer}}"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Width="Auto" x:Name="LayoutRoot" Height="Auto" SnapsToDevicePixels="True" Background="Transparent">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.02"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="border">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="border">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled"/>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.02"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Unfocused"/>
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="border">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ValidationStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.02"/>
                                </VisualStateGroup.Transitions>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="border" BorderBrush="{DynamicResource WhiteAlfa30}" BorderThickness="1" CornerRadius="3" Opacity="0">
                            <Border BorderBrush="{DynamicResource BlackBrush}" BorderThickness="1" CornerRadius="2">
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition/>
                                        <RowDefinition/>
                                    </Grid.RowDefinitions>
                                    <Border BorderThickness="1,1,1,0" CornerRadius="1,1,0,0" Background="{DynamicResource WhiteRoundGradient}"/>
                                    <Border BorderBrush="{DynamicResource WhiteAlfa60}" BorderThickness="1" CornerRadius="1" Grid.RowSpan="2"/>
                                    <Border Grid.RowSpan="1" Background="{DynamicResource WhiteAlfa30}" CornerRadius="1,1,0,0"/>
                                    <Border BorderThickness="1,0,1,1" CornerRadius="0,0,1,1" Background="{DynamicResource WhiteRoundGradient}" Grid.Row="1" RenderTransformOrigin="0.5,0.5">
                                        <Border.RenderTransform>
                                            <TransformGroup>
                                                <ScaleTransform ScaleY="-1" ScaleX="1"/>
                                                <SkewTransform AngleY="0" AngleX="0"/>
                                                <RotateTransform Angle="0"/>
                                                <TranslateTransform/>
                                            </TransformGroup>
                                        </Border.RenderTransform>
                                    </Border>
                                </Grid>
                            </Border>
                        </Border>
                        <Border Height="{Binding ActualHeight, ElementName=contentPresenter, Mode=OneWay}" Width="{Binding ActualWidth, ElementName=contentPresenter, Mode=OneWay}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" >
                            <Rectangle StrokeThickness="5" Stroke="#CCFFFFFF" RadiusX="5" RadiusY="5" Fill="#CCFFFFFF" Margin="-6,3,-6,2">
                                <Rectangle.Effect>
                                    <BlurEffect Radius="15"/>
                                </Rectangle.Effect>
                            </Rectangle>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True"/>
                        <Trigger Property="IsKeyboardFocused" Value="true"/>
                        <Trigger Property="ToggleButton.IsChecked" Value="true"/>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#ADADAD"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True"/>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Button}" x:Key="MainButtonTransparentStyle">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource ButtonFocusVisual}"/>
        <Setter Property="Background" Value="{DynamicResource ButtonNormalBackground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ButtonNormalBorder}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource BlackBrush}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" Width="Auto" BorderThickness="1" BorderBrush="{DynamicResource BlackBrush}" SnapsToDevicePixels="True">
                        <Grid x:Name="grid" Height="Auto">
                            <Border x:Name="NormalBorder" BorderThickness="1" BorderBrush="{DynamicResource ButtonBorderBrush}">
                                <Border x:Name="NormalBG" Height="10" VerticalAlignment="Top" MinWidth="40" Background="{DynamicResource ButtonBackgroundBrush}" OpacityMask="{DynamicResource ButtonOpacityMask}" SnapsToDevicePixels="False"/>
                            </Border>
                            <Border x:Name="MouseOverState" BorderThickness="1" Visibility="Collapsed" Background="{DynamicResource MouseOverBrush}"/>
                            <Border x:Name="PressedState" BorderThickness="1" Visibility="Collapsed" Background="{DynamicResource PressedBrush}"/>
                            <ContentPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Visibility" TargetName="MouseOverState" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true"/>
                        <Trigger Property="ToggleButton.IsChecked" Value="true"/>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#ADADAD"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Visibility" TargetName="PressedState" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Button}" x:Key="LeftMenuButtonStyle">
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Margin" Value="3"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="10,3"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Width="Auto" x:Name="LayoutRoot" Height="Auto" SnapsToDevicePixels="True" Background="Transparent">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.02"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="MouseOverBorder">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="PressedBorder">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="contentPresenter">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.6"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.02"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Unfocused"/>
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="FocusedBorder">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ValidationStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.02"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Valid"/>
                                <VisualState x:Name="InvalidFocused"/>
                                <VisualState x:Name="InvalidUnfocused"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border BorderBrush="{DynamicResource BlackBrush}" BorderThickness="1" CornerRadius="2,0,0,2">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <Border BorderThickness="1,1,1,0" CornerRadius="1,1,0,0" Background="{DynamicResource WhiteRoundGradient}"/>
                                <Border BorderBrush="{DynamicResource WhiteAlfa60}" BorderThickness="1" CornerRadius="1,0,0,1" Grid.RowSpan="2"/>
                                <Border x:Name="border1" BorderThickness="1" CornerRadius="1,0,0,0" Background="{DynamicResource WhiteRoundGradient}" Grid.Row="1" RenderTransformOrigin="0.5,0.5" Margin="0">
                                    <Border.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform ScaleY="-1" ScaleX="1"/>
                                            <SkewTransform AngleY="0" AngleX="0"/>
                                            <RotateTransform Angle="0"/>
                                            <TranslateTransform/>
                                        </TransformGroup>
                                    </Border.RenderTransform>
                                </Border>
                                <Border x:Name="MouseOverBorder" BorderBrush="{DynamicResource WhiteSolidBrush}" BorderThickness="1" CornerRadius="1,0,0,1" Grid.RowSpan="2" Opacity="0"/>
                                <Border Grid.RowSpan="1" Background="{DynamicResource WhiteAlfa30}" CornerRadius="1,0,0,0"/>
                                <Border x:Name="PressedBorder" BorderBrush="Black" BorderThickness="1" CornerRadius="1,0,0,1" Grid.RowSpan="2" Opacity="0"/>
                            </Grid>
                        </Border>
                        <Border x:Name="FocusedBorder" BorderBrush="{DynamicResource WhiteAlfa30}" BorderThickness="1" CornerRadius="2,0,0,2" Grid.RowSpan="1" Opacity="0"/>
                        <ContentPresenter x:Name="contentPresenter" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ItemsPanelTemplate x:Key="ItemsPanelTemplate">
        <DockPanel IsItemsHost="True"/>
    </ItemsPanelTemplate>
    
    <Style x:Key="MenuStyle" TargetType="{x:Type Menu}">
        <Setter Property="Background" Value="{StaticResource MenuBackground}"/>
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MenuFontFamilyKey}}"/>
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MenuFontSizeKey}}"/>
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MenuFontStyleKey}}"/>
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MenuFontWeightKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <Grid x:Name="grid" Height="Auto" SnapsToDevicePixels="true" Width="Auto">
                  <Border BorderBrush="{DynamicResource BlackBrush}" BorderThickness="1" CornerRadius="2">
                      <Grid>
                       <Grid.RowDefinitions>
                        <RowDefinition/>
                        <RowDefinition/>
                       </Grid.RowDefinitions>
                       <Border BorderThickness="1,1,1,0" CornerRadius="1,1,0,0" Background="{DynamicResource WhiteRoundGradient}"/>
                       <Border BorderBrush="{DynamicResource WhiteAlfa60}" BorderThickness="1" CornerRadius="2" Grid.RowSpan="2"/>
                       <Border x:Name="MouseOverBorder" BorderBrush="{DynamicResource WhiteSolidBrush}" BorderThickness="1" CornerRadius="1" Grid.RowSpan="2" Visibility="Collapsed"/>
                       <Border Grid.RowSpan="1" Background="{DynamicResource WhiteAlfa30}" CornerRadius="1"/>
                       <Border BorderThickness="1" CornerRadius="1" Background="{DynamicResource WhiteRoundGradient}" Grid.Row="1" RenderTransformOrigin="0.5,0.5">
                        <Border.RenderTransform>
                         <TransformGroup>
                          <ScaleTransform ScaleY="-1" ScaleX="1"/>
                          <SkewTransform AngleY="0" AngleX="0"/>
                          <RotateTransform Angle="0"/>
                          <TranslateTransform/>
                         </TransformGroup>
                        </Border.RenderTransform>
                       </Border>
                      </Grid>
                     </Border>
                     <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" d:LayoutOverrides="Width, Height"/>
                 </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="ItemsPanel" Value="{DynamicResource ItemsPanelTemplate}"/>
    </Style>
    <Style x:Key="RightMenuStyle" TargetType="{x:Type Menu}">
        <Setter Property="Background" Value="{StaticResource MenuBackground}"/>
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MenuFontFamilyKey}}"/>
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MenuFontSizeKey}}"/>
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MenuFontStyleKey}}"/>
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MenuFontWeightKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <Grid x:Name="grid" Height="Auto" SnapsToDevicePixels="true" Width="Auto">
                  <Border BorderBrush="{DynamicResource BlackBrush}" BorderThickness="1" CornerRadius="0,2,2,0">
                      <Grid>
                       <Grid.RowDefinitions>
                        <RowDefinition/>
                        <RowDefinition/>
                       </Grid.RowDefinitions>
                       <Border BorderThickness="1,1,1,0" CornerRadius="0,1,0,0" Background="{DynamicResource WhiteRoundGradient}"/>
                       <Border BorderBrush="{DynamicResource WhiteAlfa60}" BorderThickness="1" CornerRadius="0,1,1,0" Grid.RowSpan="2"/>
                       <Border x:Name="MouseOverBorder" BorderBrush="{DynamicResource WhiteSolidBrush}" BorderThickness="1" CornerRadius="0,1,1,0" Grid.RowSpan="2" Visibility="Collapsed"/>
                       <Border Grid.RowSpan="1" Background="{DynamicResource WhiteAlfa30}" CornerRadius="0,1,0,0"/>
                       <Border BorderThickness="1" CornerRadius="0,1,1,1" Background="{DynamicResource WhiteRoundGradient}" Grid.Row="1" RenderTransformOrigin="0.5,0.5">
                        <Border.RenderTransform>
                         <TransformGroup>
                          <ScaleTransform ScaleY="-1" ScaleX="1"/>
                          <SkewTransform AngleY="0" AngleX="0"/>
                          <RotateTransform Angle="0"/>
                          <TranslateTransform/>
                         </TransformGroup>
                        </Border.RenderTransform>
                       </Border>
                      </Grid>
                     </Border>
                     <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" d:LayoutOverrides="Width, Height"/>
                 </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel" Value="{DynamicResource MenuItemsPanelTemplate}"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="MinWidth" Value="0"/>
        <Setter Property="MinHeight" Value="0"/>
    </Style>

    <Style x:Key="MenuItemStyle" TargetType="{x:Type MenuItem}">
        <Setter Property="Icon" Value="{Binding Icon.SmallImage}"/>
        <Setter Property="Header" Value="{Binding FriendlyName}"/>
        <Setter Property="ItemsSource" Value="{Binding Items}"/>
        <Setter Property="Command" Value="{DynamicResource globalClickCommand}"/>
        <Setter Property="CommandParameter" Value="{Binding}"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Padding" Value="6,3"/>
        <Setter Property="MinWidth" Value="{Binding MinWidth}"/>
        <Setter Property="ContextMenu" Value="{DynamicResource fsMenuItemsContextMenu}"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding FriendlyName}" Value="{x:Static my:PowerItemTree.SEPARATOR_NAME}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Separator Style="{StaticResource {x:Static MenuItem.SeparatorStyleKey}}"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="ContextMenuItemStyle" TargetType="{x:Type MenuItem}">
        <Setter Property="Header" Value="{Binding Path=Name, 
                                                  RelativeSource={RelativeSource Self}, 
                                                  Mode=OneWay, 
                                                  Converter={StaticResource localizer}}"/>
        <Setter Property="Padding" Value="6,3"/>
    </Style>

    <Style TargetType="{x:Type TextBox}" x:Key="SearchBoxStyle">
        <Setter Property="Height" Value="24"/>
        <Setter Property="Background">
            <Setter.Value>
                <VisualBrush Stretch="None" AlignmentX="Left">
                    <VisualBrush.Visual>
                        <Grid Background="White" VerticalAlignment="Center">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="5"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="300"/>
                            </Grid.ColumnDefinitions>
                            <TextBlock Grid.Column="0" Foreground="White">padding</TextBlock>
                            <TextBlock Grid.Column="1" Foreground="#7FC0C0C0" Name="SearchBox" 
                                Height="22" Padding="0,2,0,0"
                                Text="{Binding Path=Name, RelativeSource={RelativeSource Self},
                                    Mode=OneWay, Converter={StaticResource localizer}}"
                            />
                        </Grid>
                    </VisualBrush.Visual>
                </VisualBrush>
            </Setter.Value>
        </Setter>
    </Style>
    
</ResourceDictionary>